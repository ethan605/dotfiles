# vim:fileencoding=utf-8:filetype=zsh:foldenable:foldmethod=marker:foldmarker=[[[,]]]
# [[[ Global variables
export LANG=en_GB.UTF-8
export LC_ALL=en_GB.UTF-8
export LESS='--LONG-PROMPT --RAW-CONTROL-CHARS --squeeze-blank-lines --tabs=2'
export MANPAGER='less +Gg'
export BAT_THEME='Sublime Snazzy'
export FZF_DEFAULT_OPTS='
  --color=gutter:0,prompt:2,spinner:3
  --color=hl+:5,fg+:7,bg+:0
  --color=hl:5,pointer:5,marker:2
  --cycle
  --marker="›"
  --no-height
  --pointer="›"
  --prompt="❯ "
  --reverse
'
export EDITOR=nvim
export REACT_EDITOR=nvim
export GOPATH="$HOME/go"

{{- if eq .chezmoi.os "linux" }}

export TERMINFO=/usr/share/terminfo
export GPG_TTY=$(tty)

# XDG base directories
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/flatpak/exports/share
export XDG_CONFIG_DIRS=/etc/xdg

# Input method
export GTK_IM_MODULE=fcitx
export XMODIFIERS=@im=fcitx
export QT_IM_MODULE=fcitx

export JDTLS_HOME="/usr/share/java/jdtls"

{{- else if eq .chezmoi.os "darwin" }}

export TOOLCHAINS=swift

# Rewrite $PATH
PATH="/usr/local/bin:/usr/local/sbin:$(getconf PATH)"

# Replace macOS utilities with GNU ones
PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
PATH="/usr/local/opt/diffutils/bin:$PATH"
PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"
PATH="/usr/local/opt/gnu-getopt/bin:$PATH"
PATH="/usr/local/opt/gnu-indent/libexec/gnubin:$PATH"
PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"
PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"

export JDTLS_HOME="{{ .chezmoi.homeDir }}/.local/opt/jdtls-launcher"

{{- end }}

export JDK_HOME="$HOME/.asdf/installs/java/$(cat $HOME/.tool-versions | grep -Po '(?<=java ).*')"
export JAVA_HOME="$JDK_HOME"
PATH="$JAVA_HOME:$PATH"
PATH="$GOPATH/bin:$PATH"
PATH="$HOME/.local/bin:$PATH"
PATH="./node_modules/.bin:$PATH"
export PATH
#]]]

# [[[ Init functions
function __load-asdf() {
{{- if eq .chezmoi.os "linux" }}

  [ -f /opt/asdf-vm/asdf.sh ] && source /opt/asdf-vm/asdf.sh

{{- else if eq .chezmoi.os "darwin" }}

  [ -f "$(brew --prefix asdf)/libexec/asdf.sh" ] && source "$(brew --prefix asdf)/libexec/asdf.sh"

{{- end }}
}

function __load-key-bindings() {
  # Set editor default keymap to vi
  bindkey -v

  autoload -U edit-command-line
  zle -N edit-command-line
  bindkey -M vicmd 'vv' edit-command-line

  bindkey '^w' backward-kill-word
  bindkey '^h' backward-delete-char
  bindkey '^l' forward-word

  # Allow Ctrl-a and Ctrl-e to move to beginning/end of line
  bindkey '^a' beginning-of-line
  bindkey '^e' end-of-line

  # Shift+Tab as reverse completion
  bindkey '^[[Z' reverse-menu-complete

  # Bind up and down keys
  zmodload -F zsh/terminfo +p:terminfo
  if [[ -n ${terminfo[kcuu1]} && -n ${terminfo[kcud1]} ]]; then
    bindkey ${terminfo[kcuu1]} history-substring-search-up
    bindkey ${terminfo[kcud1]} history-substring-search-down
  fi

  bindkey -M vicmd 'k' history-substring-search-up
  bindkey -M vicmd 'j' history-substring-search-down

{{- if eq .chezmoi.os "linux" }}

  source /usr/share/fzf/key-bindings.zsh
  source /usr/share/fzf/completion.zsh

{{- else if eq .chezmoi.os "darwin" }}

  source /usr/local/opt/fzf/shell/key-bindings.zsh
  source /usr/local/opt/fzf/shell/completion.zsh

{{- end }}
}

function __load-perl() {
{{- if eq .chezmoi.os "linux" }}

  export PATH="$HOME/perl5/bin${PATH:+:${PATH}}"
  export PERL5LIB="$HOME/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
  export PERL_LOCAL_LIB_ROOT="$HOME/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
  export PERL_MB_OPT="--install_base \"$HOME/perl5\""
  export PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"

{{- end }}
}

function __load-ssh() {
{{- if eq .chezmoi.os "linux" }}

  #export SSH_ASKPASS="$HOME/.local/bin/ssh-pass"
  eval $(DISPLAY=:0 SSH_ASKPASS="$HOME/.local/bin/ssh-pass" keychain --eval --quiet "$HOME/.ssh/id_ed25519")
  #unset SSH_ASKPASS

{{- else if eq .chezmoi.os "darwin" }}

  if [[ ! -z "$SSH_CLIENT" && ! -z "$SSH_TTY" ]]; then
    eval $(ssh-agent)
    cat ~/.ssh/id_ed25519 | DISPLAY=:0 SSH_ASKPASS="$HOME/.local/bin/ssh-pass" ssh-add -
  fi

{{- end }}
}

{{- if eq .chezmoi.os "linux" }}

function __load-sway() {
  if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then
    export _JAVA_AWT_WM_NONREPARENTING=1
    # export QT_QPA_PLATFORM=wayland-egl
    # export QT_QPA_PLATFORMTHEME=qt5ct
    # export QT_WAYLAND_FORCE_DPI=physical
    # export QT_WAYLAND_DISABLE_WINDOWDECORATION=1
    export QT_QPA_PLATFORM=wayland
    export SDL_VIDEODRIVER=wayland
    export XDG_CURRENT_DESKTOP=sway
    export XDG_SESSION_TYPE=wayland
    export TERM=termite
    export MOZ_ENABLE_WAYLAND=1
    # export BROWSER=firefox

    exec sway -d 2> $HOME/.logs/sway.log
  fi
}

{{- end }}

function __load-zim() {
  # Set history file
  HISTFILE=~/.zsh_history

  # Customize spelling correction prompt.
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

  # Remove usable components (/.-=) from WORDCHARS.
  WORDCHARS=${WORDCHARS//[\/\.\-=]}

  # Custom symbols for pure prompt
  #PURE_PROMPT_SYMBOL='λ'            # originally '❯'
  #PURE_PROMPT_VICMD_SYMBOL='ε'      # originally '❮'

  # Set what highlighters will be used.
  # See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
  ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

  # Remove older command from the history if a duplicate is to be added.
  setopt HIST_IGNORE_ALL_DUPS

  # Prompt for spelling correction of commands.
  setopt CORRECT

  # Set a custom path for the completion dump file.
  # If none is provided, the default ${ZDOTDIR:-${HOME}}/.zcompdump is used.
  zstyle ':zim:completion' dumpfile "${ZDOTDIR:-${HOME}}/.zcompdump-${ZSH_VERSION}"

  if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
    # Update static initialization script if it does not exist or it's outdated, before sourcing it
    source ${ZIM_HOME}/zimfw.zsh init -q
  fi

  source ${ZIM_HOME}/init.zsh

{{- if eq .chezmoi.os "linux" }}

  autoload -Uz add-zsh-hook
  add-zsh-hook -Uz chpwd osc7_cwd

{{- end }}
}

function __load-zsh-plugins() {
  eval "$(starship init zsh)"
  eval "$(zoxide init zsh)"
  eval "$(direnv hook zsh)"
}
#]]]

# [[[ Utils
function creds() {
{{- if eq .chezmoi.os "linux" }}
local cmd="$HOME/Work/creds/venv/bin/creds"
{{- else if eq .chezmoi.os "darwin" }}
  local cmd="/usr/local/bin/creds"
{{- end }}
  local sub_command=${1-}

  # Pass all arguments to the cmd if the sub command isn't "login"
  if [[ "$sub_command" != "login" ]]; then
    "$cmd" "$@"
    return
  fi

  local options=$("$cmd" aws list 2> /dev/null)
  local header_lines=$(echo "$options" | rg -n "\-{4,}" | cut -d':' -f1)
  local selected=$(echo "$options" | fzf --header-lines="$header_lines" | sed 's/\s\+/ /g')
  [[ -z "$selected" ]] && return 1

  local profile=$(echo "$selected" | cut -d' ' -f2)
  local role=$(echo "$selected" | cut -d' ' -f3)
  "$cmd" aws login -n "$profile" "$role"
}

{{- if eq .chezmoi.os "linux" }}

function __urlencode() {
  local length="${#1}"

  for (( i = 0; i < length; i++ )); do
    local c="${1:$i:1}"
    case $c in
      %) printf '%%%02X' "'$c" ;;
      *) printf "%s" "$c" ;;
    esac
  done
}

function osc7_cwd() {
  printf '\e]7;file://%s%s\e\\' "$HOSTNAME" "$(__urlencode "$PWD")"
}

function nord_dns() {
  device=$(/usr/bin/ls /sys/class/ieee80211/*/device/net)
  nmcli dev mod $device ipv4.dns "103.86.96.100 103.86.99.100"
}

function work_proxy() {
  local proxy_host="localhost"
  local proxy_port=3128
  local proxy_ip=$(ifconfig | rg "inet 192" | awk '{ print $2 }')

  local sub_command=${1-}

  # Toggle system-wise
  if [[ -z "$sub_command" ]]; then
    # On
    if [[ -z "$http_proxy" ]]; then
      export http_proxy="http://$proxy_host:$proxy_port/"
      export https_proxy=$http_proxy
      export no_proxy="localhost,127.0.0.1,192.168.1.1,::1,*.local"
      export HTTP_PROXY=$http_proxy
      export HTTPS_PROXY=$http_proxy
      export NO_PROXY=$no_proxy

      echo "VPN proxy enabled: $http_proxy"
    else
      unset http_proxy https_proxy no_proxy HTTP_PROXY HTTPS_PROXY NO_PROXY

      echo "VPN proxy disabled"
    fi
  fi

  # Toggle docker-wise
  if [[ "$sub_command" == "docker" ]]; then
    local docker_file="$HOME/.docker/config.json"
    local has_proxies=$(cat "$docker_file" | jq -r '.proxies')

    # On
    if [[ "$has_proxies" == "null" ]]; then
      local docker_proxy="http://$proxy_ip:$proxy_port/"

      local docker_config=$(cat "$docker_file" |
        jq -r ".proxies = { default: { httpProxy: \"$docker_proxy\", httpsProxy: \"$docker_proxy\", noProxy: \"$no_proxy\" } }")
      echo "$docker_config" >| "$docker_file"

      echo "VPN proxy enabled for Docker:"
      echo "$docker_config" | jq -r
    else # Off
      local docker_config=$(cat "$docker_file" | jq -r 'del(.proxies)')
      echo "$docker_config" >| "$docker_file"

      echo "VPN proxy disabled for Docker:"
      echo "$docker_config" | jq -r
    fi
  fi
}

{{- else if eq .chezmoi.os "darwin" }}

function fix_keyboard() {
  # Based on: https://developer.apple.com/library/archive/technotes/tn2450/_index.html
  hidutil property --set '{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x700000064,"HIDKeyboardModifierMappingDst":0x700000035},{"HIDKeyboardModifierMappingSrc":0x700000035,"HIDKeyboardModifierMappingDst":0x7000000E1}]}'
}

function aws_vpn() {
  local sub_command=${1-}
  [[ -z "$sub_command" ]] && echo "Usage: $(basename $0) up|down|restart"

  local launchd_agent="$HOME/Library/LaunchAgents/com.aws.vpn-client.plist"

  case "$sub_command" in
    up) launchctl load "$launchd_agent" ;;
    down) launchctl unload "$launchd_agent" ;;
    restart) launchctl unload "$launchd_agent" && launchctl load "$launchd_agent" ;;
  esac
}

{{- end }}

#]]]

#[[[ Aliases
# Remap system commands
alias nano=nvim
alias rm='rm --interactive'
alias top='gotop --color=monokai --layout=minimal'
alias vi=nvim
alias vim=nvim

{{- if eq .chezmoi.os "linux" }}

alias clippick='clipman pick --print0 --tool=CUSTOM --tool-args="fzf --read0"'
alias load-time='time /usr/bin/zsh -ic exit'
alias ncmpcpp='ncmpcpp --bindings $HOME/.config/ncmpcpp/bindings'

{{- else if eq .chezmoi.os "darwin" }}

alias brewed='brew update --verbose && brew upgrade --verbose && brew cleanup --prune=all'
alias load-time='time /usr/local/bin/zsh -ic exit'
alias policy-off='sudo spctl --master-disable'
alias policy-on='sudo spctl --master-enable'
alias xdg-open='open'

{{- end }}

alias color-palette='curl -s https://gist.githubusercontent.com/ethan605/ea1b698c3395b9339748e8a0131136a5/raw | bash'
alias npm-dump='npm -g list -d0 --parseable | grep -Po "(?<=node_modules/).*$" >| ~/.npm_modules'
alias zim='zimfw upgrade && zimfw update && zimfw clean && zimfw build && zimfw compile'

# Shortcuts
alias a='axel --alternate --num-connections=8 --output $HOME/Downloads/'
alias c=chezmoi
alias d='nvim -d'
alias f=vifm

alias v=nvim
alias w='watch --color --differences --errexit --exec'
#]]]

# [[[ Autoloads
{{- if eq .chezmoi.os "linux" }}
__load-sway
{{- end }}

__load-ssh

# Base envs
__load-zim
__load-key-bindings
__load-zsh-plugins

# Dev tools
__load-asdf
__load-perl

{{- if eq .chezmoi.hostname "PF3XSEPR"}}
source "$HOME/.config/work_envs"
{{- end }}
#]]]
