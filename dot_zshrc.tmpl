# vim:fileencoding=utf-8:filetype=zsh:foldenable:foldmethod=marker:foldmarker=[[[,]]]
# [[[ Global variables
export LANG=en_GB.UTF-8
export LC_COLLATE="$LANG"
export LC_CTYPE="$LANG"
export LC_MESSAGES="$LANG"
export LC_MONETARY="$LANG"
export LC_NUMERIC="$LANG"
export LC_TIME="$LANG"
export LC_ALL="$LANG"
export LESS='--LONG-PROMPT --RAW-CONTROL-CHARS --squeeze-blank-lines --tabs=2'
export MANPAGER='less +Gg'
export BAT_THEME='Sublime Snazzy'
export FZF_DEFAULT_OPTS='
  --color=fg+:7,bg+:0,hl:5,hl+:5
  --color=gutter:0,header:4,marker:2,pointer:5,prompt:2,spinner:3
  --cycle
  --marker="›"
  --pointer="›"
  --prompt="❯ "
  --reverse
  --no-height
'
export FZF_CTRL_R_OPTS='
  --preview="echo {2..} | bat --language=zsh --color=always"
  --bind="ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort"
  --header="Press CTRL-Y to copy command into clipboard"
'
export EDITOR=nvim
export VISUAL=nvim
export REACT_EDITOR=nvim
export CC=clang
export CXX=clang++

{{- if eq .chezmoi.os "linux" }}

export TERMINFO=/usr/share/terminfo
export GPG_TTY=$(tty)

# XDG base directories
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/flatpak/exports/share
export XDG_CONFIG_DIRS=/etc/xdg

# Input method
export GTK_IM_MODULE=fcitx
export XMODIFIERS=@im=fcitx
export QT_IM_MODULE=fcitx

{{- else if eq .chezmoi.os "darwin" }}

export TOOLCHAINS=swift
export NODE_OPTIONS="--max-old-space-size=8192"

# Rewrite $PATH
PATH="/usr/local/bin:/usr/local/sbin:$(getconf PATH)"

# Homebrew
export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"

# Replace macOS utilities with GNU ones
PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
PATH="$(brew --prefix diffutils)/bin:$PATH"
PATH="$(brew --prefix findutils)/libexec/gnubin:$PATH"
PATH="$(brew --prefix gnu-getopt)/bin:$PATH"
PATH="$(brew --prefix gnu-indent)/libexec/gnubin:$PATH"
PATH="$(brew --prefix gnu-sed)/libexec/gnubin:$PATH"
PATH="$(brew --prefix gnu-tar)/libexec/gnubin:$PATH"
PATH="$(brew --prefix grep)/libexec/gnubin:$PATH"
PATH="$(brew --prefix llvm)/bin:$PATH"

{{- if eq .work.email "thanh@encord.com" }}

PATH="$(brew --prefix postgresql@15)/bin:$PATH"

{{- end }}

{{- end }}

PATH="$HOME/.local/bin:$PATH"
PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
#PATH="$(asdf where golang)/bin:$PATH"
#PATH="./node_modules/.bin:$PATH"
export PATH
#]]]

# [[[ Init functions
function __load-key-bindings() {
  # Set editor default keymap to vi
  bindkey -v

  autoload -U edit-command-line
  zle -N edit-command-line
  bindkey -M vicmd 'vv' edit-command-line

  # Word manipulation
  bindkey '^w' backward-kill-word

  # Vim-like bindings
  bindkey '^h' backward-word        # left
  bindkey '^l' forward-word         # right
  bindkey '^k' up-line-or-search    # up
  bindkey '^j' down-line-or-search  # down

  # Ctrl-a and Ctrl-e to move to beginning/end of line
  bindkey '^a' beginning-of-line
  bindkey '^e' end-of-line

  # Shift+Tab as reverse completion
  bindkey '^[[Z' reverse-menu-complete

  # Bind up and down keys
  zmodload -F zsh/terminfo +p:terminfo
  if [[ -n ${terminfo[kcuu1]} && -n ${terminfo[kcud1]} ]]; then
    bindkey ${terminfo[kcuu1]} history-substring-search-up
    bindkey ${terminfo[kcud1]} history-substring-search-down
  fi

  bindkey -M vicmd 'k' history-substring-search-up
  bindkey -M vicmd 'j' history-substring-search-down
}

function __load-perl() {
{{- if eq .chezmoi.os "linux" }}

  export PATH="$HOME/perl5/bin${PATH:+:${PATH}}"
  export PERL5LIB="$HOME/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
  export PERL_LOCAL_LIB_ROOT="$HOME/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
  export PERL_MB_OPT="--install_base \"$HOME/perl5\""
  export PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"

{{- end }}
}

function __load-ssh() {
{{- if eq .chezmoi.os "darwin" }}

  defaults write org.gpgtools.common UseKeychain NO

{{- end }}

  eval $(DISPLAY=:0 SSH_ASKPASS="$HOME/.local/bin/ssh-pass-work" keychain --eval --quiet "$HOME/.ssh/id_ed25519")
  eval $(DISPLAY=:0 SSH_ASKPASS="$HOME/.local/bin/ssh-pass-thanhnx.605" keychain --eval --quiet "$HOME/.ssh/thanhnx.605_id_ed25519")
}

{{- if eq .chezmoi.os "linux" }}

function __load-sway() {
  if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then
    export _JAVA_AWT_WM_NONREPARENTING=1
    # export QT_QPA_PLATFORM=wayland-egl
    # export QT_QPA_PLATFORMTHEME=qt5ct
    # export QT_WAYLAND_FORCE_DPI=physical
    # export QT_WAYLAND_DISABLE_WINDOWDECORATION=1
    export QT_QPA_PLATFORM=wayland
    export SDL_VIDEODRIVER=wayland
    export XDG_CURRENT_DESKTOP=sway
    export XDG_SESSION_TYPE=wayland
    export TERM=foot
    export MOZ_ENABLE_WAYLAND=1

{{- if eq .chezmoi.hostname "PF3XSEPR" }}
    export BROWSER=google-chrome-stable
{{- else }}
    export BROWSER=firefox
{{- end }}

    exec sway -d 2> $HOME/.logs/sway.log
  fi
}

{{- end }}

function __load-work-envs() {
{{- if eq .work.email "thanh@encord.com" }}

  source "$(asdf where gcloud)/path.zsh.inc"
  source "$(asdf where gcloud)/completion.zsh.inc"

  export WORK_DIR="$HOME/work"
  export PATH="$WORK_DIR/.env/bin:$PATH"

  if [[ -f "$WORK_DIR/.env/.zshrc" ]]; then
    source "$WORK_DIR/.env/.zshrc"
  fi

{{- end}}
}

function __load-zim() {
  if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
    # Update static initialization script if it does not exist or it's outdated, before sourcing it
    source ${ZIM_HOME}/zimfw.zsh init -q
  fi

  source ${ZIM_HOME}/init.zsh

  __load-zsh-plugins
  __load-key-bindings
  __load-zsh-settings
}

function __load-zsh-plugins() {
  eval "$(asdf completion zsh)"
  eval "$(direnv hook zsh)"
  eval "$(starship init zsh)"
  eval "$(zoxide init zsh)"
}

function __load-zsh-settings() {
  # History settings
  HISTFILE="$HOME/.zhistory"
  HISTSIZE=1000000                 # 1 million entries
  SAVEHIST=1000000                 # 1 million entries

  setopt BANG_HIST                 # Treat the '!' character specially during expansion.
  setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
  setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
  setopt SHARE_HISTORY             # Share history between all sessions.
  setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
  setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
  setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
  setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
  setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
  setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
  setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
  setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
  setopt HIST_BEEP                 # Beep when accessing nonexistent history.

  # Customize spelling correction prompt.
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

  # Remove usable components (/.-=) from WORDCHARS.
  WORDCHARS=${WORDCHARS//[\/\.\-=]}

  # Set what highlighters will be used.
  # See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
  ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

  # Prompt for spelling correction of commands.
  setopt CORRECT

  # Set a custom path for the completion dump file.
  # If none is provided, the default ${ZDOTDIR:-${HOME}}/.zcompdump is used.
  zstyle ':zim:completion' dumpfile "${ZDOTDIR:-${HOME}}/.zcompdump-${ZSH_VERSION}"

  # For fzf-tab
  zstyle -d ':completion:*' format
  zstyle ':completion:*:descriptions' format '[%d]'
  zstyle ':fzf-tab:*' fzf-flags \
    --color=fg+:7,bg+:0,hl:5,hl+:5,gutter:0,header:4,marker:2,pointer:5,prompt:2,spinner:3 \
    --cycle --marker='›' --pointer='›' --prompt='❯ ' --reverse

{{- if eq .chezmoi.os "linux" }}

  autoload -Uz add-zsh-hook
  add-zsh-hook -Uz chpwd osc7_cwd

{{- end }}
}
#]]]

# [[[ Utils
function greek-letters() {
  print -P "alpha: %F{red}α%f,beta: %F{red}β%f,gamma: %F{red}γ%f,delta: %F{red}δ%f,epsilon: %F{red}ε%f,theta: %F{red}θ%f,lambda: %F{red}λ%f,mu: %F{red}μ%f,pi: %F{red}π%f,sigma: %F{red}σ%f,phi: %F{red}φ%f,omega: %F{red}ω%f" \
    | tr ',' '\n' \
    | fzf --ansi \
    | awk '{ print $2 }'
}

function mux() {
  local workspace=${1:-$(greek-letters)}
  tmux attach -t "$workspace" || tmux new -s "$workspace"
}

{{- if eq .chezmoi.os "linux" }}

function nord_dns() {
  device=$(/usr/bin/ls /sys/class/ieee80211/*/device/net)
  nmcli dev mod $device ipv4.dns "103.86.96.100 103.86.99.100"
}

function osc7_cwd() {
  setopt localoptions extendedglob
  input=( ${(s::)PWD} )
  uri=${(j::)input/(#b)([^A-Za-z0-9_.\!~*\'\(\)-\/])/%${(l:2::0:)$(([##16]#match))}}
  print -n "\e]7;file://${HOSTNAME}${uri}\e\\"
}

{{- end }}
#]]]

# [[[ Aliases
# Remap system commands
alias nano=nvim
alias rm='rm -i'
alias vi=nvim
alias vim=nvim

{{- if eq .chezmoi.os "linux" }}

alias clippick='clipman pick --print0 --tool=CUSTOM --tool-args="fzf --read0"'
alias load-time='time /usr/bin/zsh -ic exit'
alias ncmpcpp='ncmpcpp --bindings $HOME/.config/ncmpcpp/bindings'

{{- else if eq .chezmoi.os "darwin" }}

alias bupdate='brew update --verbose && brew upgrade --verbose && brew cleanup --prune=all && brew doctor'
alias bbundle='brew bundle dump --describe --global --force'
alias load-time='time /opt/homebrew/bin/zsh -ic exit'
alias xdg-open='open'

{{- end }}

alias color-palette='curl -s https://gist.githubusercontent.com/ethan605/ea1b698c3395b9339748e8a0131136a5/raw | bash'
alias kargo='k argo rollouts'
alias pyenv='{ poetry env info -p >/dev/null 2>&1 && true } && source "$(poetry env info -p)/bin/activate" || source .venv/bin/activate'
alias tor='webtorrent --keep-seeding download'
alias vsync='nvim --headless "+Lazy! sync" +qa'
alias zim='zimfw upgrade && zimfw update && zimfw clean && zimfw build && zimfw compile'

# Shortcuts
alias a='axel --alternate --num-connections=8 --output $HOME/Downloads/'
alias c=chezmoi
alias d='nvim -d'
alias f=vifm
alias k=kubecolor
alias v=nvim
alias w='watch --color --differences --errexit --exec'
# ]]]

# [[[ Autoloads
{{- if eq .chezmoi.os "linux" }}
# Sway goes first
__load-sway
{{- end }}

# Work envs
__load-work-envs

# Base envs
__load-zim

# Dev tools
__load-perl

# SSH keys
__load-ssh
#]]]
